{"version":3,"sources":["Star_Wars_Logo.svg","components/Task1.js","components/Task2.js","components/Task3.js","components/Task4.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Task1","props","state","task1","fetch","then","response","json","data","setState","this","refreshList","Table","className","borderless","hover","center","map","task","LongestOpeningCrawl","Component","Task2","task2","MostAppearedCharacterinFilms","Task3","task3","MostAppearedSpeciesinFilms","Task4","task4","PeopleAndSpecies","App","updateState","bind","src","Star_Wars_Logo","alt","Button","name","variant","onClick","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.14400108.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Star_Wars_Logo.0a12a758.svg\";","import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n//component for task 1\r\nexport class Task1 extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task1:[]}\r\n    }\r\n\r\nrefreshList(){\r\n    //fetching task\r\n    fetch('http://localhost:29820/api/task1')\r\n    .then(response=> response.json())\r\n    .then(data => {\r\n        this.setState({task1:data});\r\n    } );\r\n\r\n   \r\n\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.refreshList();\r\n}\r\n\r\n    render(){\r\nconst {task1} = this.state;\r\n\r\n\r\n        return (\r\n            <Table className=\"ResultTable\" borderless hover center>\r\n            <thead>\r\n            <tr>\r\n                    <td>Which of all Star Wars movies has the longest opening crawl?</td>\r\n                </tr>\r\n            </thead>\r\n               <tbody>\r\n               {task1.map(task=>\r\n                    <tr> \r\n                    <td  className=\"Answer\">{task.LongestOpeningCrawl}</td>\r\n                    </tr>)}\r\n                   </tbody> \r\n\r\n                \r\n\r\n            </Table>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n//componenet for task2\r\nexport class Task2 extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task2:[]}\r\n    }\r\n\r\nrefreshList(){\r\n    //fetching task\r\n    fetch('http://localhost:29820/api/task2')\r\n    .then(response=> response.json())\r\n    .then(data => {\r\n        this.setState({task2:data});\r\n    } );\r\n\r\n   \r\n\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.refreshList();\r\n}\r\n\r\n    render(){\r\nconst {task2} = this.state;\r\n\r\n\r\n        return (\r\n            <Table className=\"ResultTable\" borderless hover center>\r\n            <thead>\r\n            <tr>\r\n                    <td>What character appeared in most of the Star Wars films?</td>\r\n                </tr>\r\n            </thead>\r\n               \r\n<tbody>\r\n{task2.map(task=>\r\n                    <tr> \r\n                    <td  className=\"Answer\">{task.MostAppearedCharacterinFilms}</td>\r\n                    </tr>)}\r\n</tbody>\r\n            </Table>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n//component for task 3\r\nexport class Task3 extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task3:[]}\r\n    }\r\n\r\nrefreshList(){\r\n    //fetching task\r\n    fetch('http://localhost:29820/api/task3')\r\n    .then(response=> response.json())\r\n    .then(data => {\r\n        this.setState({task3:data});\r\n    } );\r\n\r\n   \r\n\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.refreshList();\r\n}\r\n\r\n    render(){\r\nconst {task3} = this.state;\r\n\r\n\r\n        return (\r\n            <Table className=\"ResultTable\" borderless hover center>\r\n            <thead>\r\n            <tr>\r\n                    <td>What species (i.e. characters that belong to certain species) appeared in the most number of Star Wars films?</td>\r\n                </tr>\r\n            </thead>\r\n                \r\n<tbody>\r\n{task3.map(task=>\r\n                    <tr> \r\n                    <td className=\"Answer\">{task.MostAppearedSpeciesinFilms}</td>\r\n                    </tr>)}\r\n\r\n</tbody>\r\n                \r\n            </Table>\r\n        )\r\n    }\r\n}","import React,{Component} from 'react';\r\nimport {Table} from 'react-bootstrap';\r\n//component for task4\r\nexport class Task4 extends Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state={task4:[]}\r\n    }\r\n\r\nrefreshList(){\r\n    //fetching task\r\n    fetch('http://localhost:29820/api/task4')\r\n    .then(response=> response.json())\r\n    .then(data => {\r\n        this.setState({task4:data});\r\n    } );\r\n\r\n   \r\n\r\n\r\n}\r\n\r\ncomponentDidMount(){\r\n    this.refreshList();\r\n}\r\n\r\n    render(){\r\nconst {task4} = this.state;\r\n\r\n\r\n        return (\r\n            <Table className=\"ResultTable\" borderless hover center>\r\n            <thead>\r\n            <tr>\r\n                    <td>What planet in Star Wars universe provided largest number of vehicle pilots?</td>\r\n                </tr>\r\n\r\n            </thead>\r\n               <tbody>\r\n               {task4.map(task=>\r\n                    <tr> \r\n                    <td  className=\"Answer\">{task.PeopleAndSpecies}</td>\r\n                    </tr>)}\r\n               </tbody>\r\n               \r\n\r\n            </Table>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Star_Wars_Logo from './Star_Wars_Logo.svg';\nimport './App.css';\nimport Button from 'react-bootstrap/Button' \n\n\nimport {Task1} from './components/Task1'\nimport {Task2} from './components/Task2'\nimport {Task3} from './components/Task3'\nimport {Task4} from './components/Task4'\n\n\nclass App extends React.Component {\n   constructor(props) {\n      super(props);\n      \n      this.state = {\n         data: ''\n      }\n      this.updateState = this.updateState.bind(this);\n   };\n   updateState() {\n      this.setState({data: \n      <div className=\"ResultTable\">\n        <Task1 className=\"ResultTable\"/>\n        <Task2 className=\"ResultTable\"/>\n        <Task3 className=\"ResultTable\"/>\n        <Task4 className=\"ResultTable\"/> \n      </div>\n      })\n   }\n   render() {\n      return (\n\n        <div className=\"App\">\n      \n        <header className=\"App-header\">\n          <img src={Star_Wars_Logo} className=\"App-logo\" alt=\"logo\" />\n         \n          <span></span>\n          <Button name='button test' variant = 'warning' className='button-logo' onClick={this.updateState}>\n          ★ Do. Or do not. There is no try. ★\n          </Button>\n          \n\n          \n          <br />\n          <h4 className=\"Results\">{this.state.data}</h4>\n          \n        </header> \n        \n      </div>\n\n        \n      );\n   }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}